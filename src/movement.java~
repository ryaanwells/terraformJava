
public class movement{
    private map workingMap;
    private map canMove;
    private unit workingUnit;
    private int offsetX;
    private int offsetY;

    movement(map M, unit U){
	workingMap = M;
	workingUnit = U;
	offsetX = workingUnit.getX()-workingUnit.getMovement();
	offsetY = workingUnit.getY()-workingUnit.getMovement();
	canMove = new map(2*(workingUnit.getMovement())+1);
	processAccessable();
    }

    public boolean canAccess(int x, int y, int movement){
	if(x<0 || y<0) return false;
	return ((workingMap.get(x,y)!=0)&&(movement-1>=0));
    }

    public void probeNext(int prevx, int prevy, int x, int y, int movement){
	if(movement >= 0){
	    canMove.set(x-offsetX,y-offsetY,1);
	    if(y!=prevy+1 && canAccess(x,y-1,movement)){probeNext(x,y,x,y-1,movement-1);}
	    if(y!=prevy-1 && canAccess(x,y+1,movement)){probeNext(x,y,x,y+1,movement-1);}
	    if(x!=prevx+1 && canAccess(x-1,y,movement)){probeNext(x,y,x-1,y,movement-1);}
	    if(x!=prevx-1 && canAccess(x+1,y,movement)){probeNext(x,y,x+1,y,movement-1);}
	}
	
    }

    public String toString(){
	return canMove.toString();
    }

    public void processAccessable(){
	if(canMove!=null){	
	    int movement = workingUnit.getMovement();
	    int startX = workingUnit.getX();
	    int startY = workingUnit.getY();
	    probeNext(startX,startY,startX,startY,movement);
	}
	/**
	// Works in four quadrants:
	// Straight up, and everything above the origin to the left
	// Straight left, and everything below the origin to the left
	// Straight down, and everything below the origin to the right
	// Straight right, and everything above the origin to the right
	// __________________
	// |      > |        |
	// |   1  > |   4    |
	// |      > |\/\/\/\/|     +--->x
	// |--------o--------|     |
	// |^^^^^^^^|<       |    \|/
	// |   2    |<   3   |     y
	// |        |<       |
	// -------------------
	String results;
	int unitX = workingUnit.getX();
	int unitY = workingUnit.getY();
	int currentX = workingUnit.getX();
	int currentY = workingUnit.getY();
	int startBranch = 0;
	int unitMovement = workingUnit.getMovement();
	int currentMovement = workingUnit.getMovement();
	boolean finished = false;
	
	while(wantY-1 != maxY && wantY>=0){
	    
	}


	while(!finished){
	    if(workingMap.get(wantX, wantY-1) !=0 && currentMovement > 0){
		wantY--;
		currentMovement--;
		results = results + "[" + wantX + "," + wantY "] ";
		continue;
		if(workingMap.get(wantX, wantY-1) == 0 || (wantY-1== maxY)){
		    if(currentMovement == unitMovement){break;}
		    maxY = wantY;
		    if(workingMap.get(wantX-1,wantY) == 0){
			wantX = unitX;
			wantY = unitY;
			currentMovement = unitMovement;
			continue;
		    }
		}
	    }
        } */
    }
}